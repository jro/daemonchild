#!/usr/bin/env ruby

require 'rubygems'
require 'daemonchild'
require 'syslog'

debug = ARGV.include? '--debug'
logpid = ARGV.include?('--log-pid')
# important to deal with the command line args before damonizing

DaemonChild.spawn unless debug
# useful if your daemon is dying in a way that your logging doesn't capture
# as by default we set STDOUT and STDERR to /dev/null

if logpid then
  pidfile = File.new('/var/run/echo-server.pid','w+')
  pidfile << Process.pid
  pidfile.close
end

Syslog.open('echo-server', Syslog::LOG_PID | Syslog::LOG_CONS, Syslog::LOG_DAEMON)
# check out the syslog(3) on a *nix machine to get a good description of the constants
# the rdoc for syslog in ruby is very very sparse
Syslog.info 'Starting up!'

Signal.trap("TERM") do
  Syslog.info 'Shutting down'
  exit
end
# this would be useful for doing some cleanup work on shutdown
# or you might want to trap for HUP and reload your config

require 'eventmachine'

module EchoServer
  def post_init
    Syslog.info "- someone connected to the echo server!"
  end

  def receive_data data
    send_data ">>> you sent: #{data}"
  end
end

EventMachine::run {
  EventMachine::start_server "127.0.0.1", 8081, EchoServer
  Syslog.info 'running echo server on 8081'
}
